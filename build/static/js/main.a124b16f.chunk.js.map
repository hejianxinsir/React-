{"version":3,"sources":["Button.js","Control.js","Uncontrol.js","App.js","serviceWorker.js","index.js"],"names":["Button","onClick","this","props","general","value","Component","Control","state","name","password","e","setState","target","type","onChange","changeName","bind","changePassword","React","Uncontrol","handleSubmit","preventDefault","console","log","ref","current","createRef","onSubmit","App","num","className","add1","minus1","hello","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sNAEqBA,G,wDACnB,aAAc,wC,qDAKZ,OACE,6BACE,4BAAQC,QAASC,KAAKC,MAAMC,SAAUF,KAAKC,MAAME,Y,GARrBC,cCAfC,E,kDACnB,aAAc,IAAD,8BACX,gBACKC,MAAQ,CACXC,KAAM,SACNC,SAAU,OAJD,E,uDAQFC,GACTT,KAAKU,SAAS,CACZH,KAAME,EAAEE,OAAOR,U,qCAGJM,GACbT,KAAKU,SAAS,CACZF,SAAUC,EAAEE,OAAOR,U,+BAKrB,OACE,6BACE,2BAAIH,KAAKM,MAAMC,MADjB,2BAEM,2BAAOK,KAAK,OACFL,KAAK,WACLJ,MAAOH,KAAKM,MAAMC,KAClBM,SAAUb,KAAKc,WAAWC,KAAKf,QACrC,6BANV,qBAQK,2BACDY,KAAK,WACLL,KAAK,WACLJ,MAAOH,KAAKM,MAAME,SAClBK,SAAUb,KAAKgB,eAAeD,KAAKf,a,GAlCRiB,IAAMb,WCAtBc,E,kDACnB,aAAc,IAAD,8BACX,gBAIFC,aAAe,SAACV,GACdA,EAAEW,iBACFC,QAAQC,IAAI,EAAKC,IAAIC,QAAQrB,QAL7B,EAAKoB,IAAMN,IAAMQ,YAFN,E,qDAWX,OACE,0BAAMC,SAAU1B,KAAKmB,cAArB,qBACK,2BACOZ,KAAK,WACLK,KAAK,OACLW,IAAKvB,KAAKuB,W,GAjBWN,IAAMb,WCiD9BuB,E,kDA1Cb,aAAc,IAAD,8BACX,gBACKrB,MAAQ,CACXsB,IAAK,KAGP,EAAKL,IAAMN,IAAMQ,YANN,E,mDAUXJ,QAAQC,IAAI,QACZtB,KAAKU,SAAS,CACZkB,IAAK5B,KAAKM,MAAMsB,IAAI,M,+BAKtBP,QAAQC,IAAI,UACZtB,KAAKU,SAAS,CACZkB,IAAK5B,KAAKM,MAAMsB,IAAI,M,8BAKtBP,QAAQC,IAAI,W,+BAIZ,OACE,yBAAKO,UAAU,OACb,2BAAI7B,KAAKM,MAAMsB,KACf,kBAAC,EAAD,CAAQ1B,QAASF,KAAK8B,KAAKf,KAAKf,MAAOG,MAAM,iBAC7C,4BAAQJ,QAASC,KAAK+B,OAAOhB,KAAKf,OAAlC,gBACA,kBAAC,EAAD,CAAQE,QAASF,KAAKgC,MAAMjB,KAAKf,MAAOG,MAAM,uBAC9C,kBAAC,EAAD,CAAQD,QAASF,KAAK+B,OAAOhB,KAAKf,MAAOG,MAAM,uBAC/C,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GArCUC,aCIE6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,a","file":"static/js/main.a124b16f.chunk.js","sourcesContent":["import React, {Component} from 'react'\n\nexport default class Button extends Component{\n  constructor(){\n    super()\n  }\n\n  render(){\n    return (\n      <div>\n        <button onClick={this.props.general}>{this.props.value}</button>\n      </div>\n    )\n  }\n}","import React from 'react';\n\nexport default class Control extends React.Component{\n  constructor(){\n    super()\n    this.state = {\n      name: 'jonson',\n      password: '123'\n    }\n  }\n\n  changeName(e){\n    this.setState({\n      name: e.target.value\n    })\n  }\n  changePassword(e){\n    this.setState({\n      password: e.target.value\n    })\n  }\n\n  render(){\n    return (\n      <div>\n        <p>{this.state.name}</p>\n        用户名：<input type=\"text\"\n                      name=\"username\"\n                      value={this.state.name}\n                      onChange={this.changeName.bind(this)}\n              /><br/>\n\n        密码：<input \n          type=\"password\"\n          name=\"password\"\n          value={this.state.password}\n          onChange={this.changePassword.bind(this)}\n        />\n      </div>\n    )\n  }\n}","import React from 'react';\n\nexport default class Uncontrol extends React.Component{\n  constructor(){\n    super()\n    this.ref = React.createRef()\n  }\n\n  handleSubmit = (e)=>{\n    e.preventDefault()\n    console.log(this.ref.current.value)\n  }\n\n  render(){\n    return (\n      <form onSubmit={this.handleSubmit}>\n        密码：<input\n                  name=\"password\"\n                  type=\"text\"\n                  ref={this.ref}\n              />\n      </form>\n    )\n  }\n}","import React from 'react';\nimport {Component} from 'react';\nimport './App.css';\n\nimport Button from './Button.js';\nimport Control from './Control.js';\nimport Uncontrol from './Uncontrol.js';\n\nclass App extends Component {\n  constructor(){\n    super()\n    this.state = {\n      num: 100\n    }\n\n    this.ref = React.createRef()\n  }\n\n  add1(){\n    console.log('add1')\n    this.setState({\n      num: this.state.num+1\n    })\n  }\n\n  minus1(){\n    console.log('minus1')\n    this.setState({\n      num: this.state.num-1\n    })\n  }\n\n  hello(){\n    console.log('hello')\n  }\n  \n  render(){\n    return (\n      <div className=\"App\">\n        <p>{this.state.num}</p>\n        <Button general={this.add1.bind(this)} value=\"加一\"/>\n        <button onClick={this.minus1.bind(this)}>减一</button>\n        <Button general={this.hello.bind(this)} value=\"打招呼\"/>\n        <Button general={this.minus1.bind(this)} value=\"再减一\"/>\n        <Control />\n        <Uncontrol />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}